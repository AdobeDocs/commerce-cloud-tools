{"version":3,"file":"component---src-pages-docker-configure-index-md-b943385313d9402a89ac.js","mappings":"mSAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,GAHsBD,MAKtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,oCACH,qCACL,kBAAK,8HACL,kBAAK,6GACL,oBACE,eAAIC,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,6DACL,sEAA0E,wBACjF,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,kDACL,yBAA6B,8BACpC,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,8CACL,qBAAyB,WAAS,uBAAYA,WAAW,MAAO,4BAAyC,iEAChH,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,4BACL,4CAAgD,oEAEzD,SAACX,EAAW,CAACY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,8DAA4D,uBAAYC,WAAW,KAAM,4BAAyC,qCAAmC,uBAAYA,WAAW,KAAM,sBAAmC,+FAA6F,uBAAYA,WAAW,KAAM,+BAA4C,kBAAgB,uBAAYA,WAAW,KAAM,+BAA4C,8FAA4F,cAAGA,WAAW,IAC/kB,KAAQ,gDACL,0BAA8B,MACrC,eACE,GAAM,4BACH,6BACL,kBAAK,mCAAiC,uBAAYA,WAAW,KAAM,UAAuB,mLAC1F,kBAAK,iEAA+D,cAAGA,WAAW,IAC9E,KAAQ,kEACL,4BAAgC,oJACvC,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,sLAEP,kBAAK,4DAA0D,uBAAYA,WAAW,KAAM,SAAsB,6BAA2B,uBAAYA,WAAW,KAAM,gBAA6B,mBAAiB,uBAAYA,WAAW,KAAM,oBAAiC,kIACtR,eACE,GAAM,8BACH,+BACL,kBAAK,4DAA0D,uBAAYA,WAAW,KAAM,oBAAiC,sBAAoB,uBAAYA,WAAW,KAAM,sBAAmC,0GACjN,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,+BAEP,kBAAK,+FAA6F,uBAAYA,WAAW,KAAM,0CAAuD,2BACtL,eACE,GAAM,wCACH,yCACL,kBAAK,gIACL,mBAAG,mBAAQA,WAAW,KAAM,yCAAkD,MAC9E,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,YAAU,uBAAYA,WAAW,KAAM,QAAqB,SAAO,uBAAYA,WAAW,KAAM,QAAqB,oBAAkB,uBAAYA,WAAW,KAAM,iBAA8B,cACvN,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,+EAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,+CAA6C,uBAAYA,WAAW,KAAM,cAA2B,WAC1H,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,+BAEP,cAAGA,WAAW,MAAO,4EACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,iEAIX,eACE,GAAM,gBACH,iBACL,kBAAK,qEAAmE,cAAGA,WAAW,IAClF,KAAQ,8CACL,WAAe,+HACtB,kBAAK,4HAA0H,uBAAYA,WAAW,KAAM,gCAIhK,CAEAH,EAAWM,gBAAiB,C","sources":["webpack://commerce-cloud-tools/./src/pages/docker/configure/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-cloud-tools/commerce-cloud-tools/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configure-the-docker-environment\"\n    }}>{`Configure the Docker environment`}</h1>\n    <p>{`Cloud Docker for Commerce uses Docker Compose to build and deploy Adobe Commerce to a multi-container Docker application.`}</p>\n    <p>{`You can generate the Docker Compose configuration to build and deploy Docker from the following sources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"configuration-sources.md#cloud-configuration-for-commerce\"\n        }}>{`Adobe Commerce on cloud infrastructure project configuration files`}</a>{` for Cloud projects`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"configuration-sources.md#unified-configuration\"\n        }}>{`Unified configuration`}</a>{` for On-premises projects`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"configuration-sources.md#cli-configuration\"\n        }}>{`CLI configuration`}</a>{` using `}<inlineCode parentName=\"li\">{`ece-docker build:compose`}</inlineCode>{` command options to override configuration values at runtime`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"custom-docker-compose.md\"\n        }}>{`Custom Docker Compose configuration file`}</a>{` supports installation for both Cloud and On-premises projects`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`When you build the Docker Compose configuration file, the `}<inlineCode parentName=\"p\">{`ece-docker build:compose`}</inlineCode>{` command overwrites the existing `}<inlineCode parentName=\"p\">{`docker-compose.yml`}</inlineCode>{` configuration file. You can save customizations for the Docker Compose configuration in a `}<inlineCode parentName=\"p\">{`docker-compose.override.yml`}</inlineCode>{` file. If the `}<inlineCode parentName=\"p\">{`docker-compose.override.yml`}</inlineCode>{` file is present, then the override configuration merges with the base configuration. See `}<a parentName=\"p\" {...{\n        \"href\": \"../quick-reference.md#override-configuration\"\n      }}>{`Override configuration`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"run-composer-with-docker\"\n    }}>{`Run Composer with Docker`}</h2>\n    <p>{`You can run composer using the `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` command before you create the container instance. This technique is useful to create an application instance during the CI/CD build process, or even during first-time setup.`}</p>\n    <p>{`When you run composer with Docker commands, you must use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/r/magento/magento-cloud-docker-php/tags\"\n      }}>{`Docker Hub PHP Image Tag`}</a>{` that matches the Adobe Commerce application version. The following example uses PHP 7.3. You run this command from the project root directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker run -it  -v $(pwd):/app/:delegated -v ~/.composer/:/root/.composer/:delegated magento/magento-cloud-docker-php:7.3-cli-1.1 bash -c \"composer install&&chown www. /app/\"\n`}</code></pre>\n    <p>{`This command passes in the current working directory as `}<inlineCode parentName=\"p\">{`/app/`}</inlineCode>{`, includes composer from `}<inlineCode parentName=\"p\">{`~/.composer/`}</inlineCode>{`, and runs the `}<inlineCode parentName=\"p\">{`composer install`}</inlineCode>{` command in the container. After this set up, the command fixes the permissions on the files that have been added or changed.`}</p>\n    <h2 {...{\n      \"id\": \"update-composer-for-docker\"\n    }}>{`Update Composer for Docker`}</h2>\n    <p>{`To update the Composer version in Cloud Docker, add the `}<inlineCode parentName=\"p\">{`COMPOSER_VERSION`}</inlineCode>{` variable to your `}<inlineCode parentName=\"p\">{`.docker/config.env`}</inlineCode>{` file with the version you want to use. For example, to use Composer 2.x with Adobe Commerce >=2.4.2:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-conf\"\n      }}>{`COMPOSER_VERSION=2.0.12\n`}</code></pre>\n    <p>{`When you build your Docker image with this variable, Cloud Docker uses this version to run `}<inlineCode parentName=\"p\">{`composer self-update $COMPOSER_VERSION`}</inlineCode>{` for your environment.`}</p>\n    <h2 {...{\n      \"id\": \"run-docker-on-a-custom-host-and-port\"\n    }}>{`Run Docker on a custom host and port`}</h2>\n    <p>{`Sometimes you might want to run Docker on a different host and port, for example if you need more than one Docker instance.`}</p>\n    <p><strong parentName=\"p\">{`To configure the custom host and port`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add the `}<inlineCode parentName=\"p\">{`host`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`port`}</inlineCode>{` options to the `}<inlineCode parentName=\"p\">{`build:compose`}</inlineCode>{` command.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`./vendor/bin/ece-docker build:compose --host=magento2.test --port=8080\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add or update the custom host name in your `}<inlineCode parentName=\"p\">{`/etc/hosts`}</inlineCode>{` file.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-conf\"\n          }}>{`127.0.0.1 magento2.test\n`}</code></pre>\n        <p parentName=\"li\">{`Alternatively, you can run the following command to add it to the file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`echo \"127.0.0.1 magento2.test\" | sudo tee -a /etc/hosts\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"set-up-email\"\n    }}>{`Set up email`}</h2>\n    <p>{`The default Cloud Docker for Commerce configuration includes the `}<a parentName=\"p\" {...{\n        \"href\": \"../containers/service.md#mailhog-container\"\n      }}>{`MailHog`}</a>{` service as a replacement for the Sendmail service. Sendmail can cause performance issues in the local Docker environment.`}</p>\n    <p>{`After you start the Docker environment, go to the following URL to access the MailHog service and view outgoing emails: `}<inlineCode parentName=\"p\">{`http://magento2.docker:8025`}</inlineCode></p>\n    {/*Link definitions*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}