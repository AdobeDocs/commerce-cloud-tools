{"version":3,"file":"component---src-pages-docker-deploy-production-mode-md-11731bcf829f8aefb967.js","mappings":"iSAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,GAHsBD,MAKtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,mBACH,oBACL,kBAAK,kHACL,kBAAK,qIACL,mBAAG,mBAAQC,WAAW,KAAM,oBAC5B,kBAAK,iBAAe,cAAGA,WAAW,IAC9B,KAAQ,iCACL,sBAA0B,MACjC,mBAAG,mBAAQA,WAAW,KAAM,uDAAgE,MAC5F,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gIAA8H,uBAAYA,WAAW,KAAM,SAAsB,SAAO,cAAGA,WAAW,IACvN,KAAQ,wDACL,qBAAyB,MAChC,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,8CAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,eAAIA,WAAW,KAAM,YAAiB,8JACzD,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,sDAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,yDACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,6BAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,uDACrB,eAAIA,WAAW,OACb,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,kDACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,kDAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,mDACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,oDAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,2BACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,2DAKb,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,mCACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,yHAEP,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,mGAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,qBACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,mEAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,eAAIA,WAAW,KAAM,YAAiB,mHACzD,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,+BAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,mFACrB,eAAIA,WAAW,OACb,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,6BAElD,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,gCAItD,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,wDAAsD,uBAAYA,WAAW,KAAM,iCAA8C,OACtJ,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAO,eAAa,uBAAYA,WAAW,MAAO,WACjE,eAAIA,WAAW,MAAO,eAAa,uBAAYA,WAAW,MAAO,eAGrE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,sCAAoC,uBAAYA,WAAW,KAAM,mCAG1F,SAACX,EAAW,CAACY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,mBAAiB,uBAAYC,WAAW,KAAM,kCAA+C,0DAAwD,mBAAQA,WAAW,KAAM,YAAqB,qBAAmB,mBAAQA,WAAW,KAAM,uCAAgD,oDAAkD,mBAAQA,WAAW,KAAM,YAAqB,uBAAqB,uBAAYA,WAAW,KAAM,gBAA6B,0CAAwC,uBAAYA,WAAW,KAAM,QAAqB,uBAAqB,uBAAYA,WAAW,KAAM,MAAmB,QAAM,uBAAYA,WAAW,KAAM,cAA2B,2CAGprB,CAEAH,EAAWM,gBAAiB,C","sources":["webpack://commerce-cloud-tools/./src/pages/docker/deploy/production-mode.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-cloud-tools/commerce-cloud-tools/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"production-mode\"\n    }}>{`Production mode`}</h1>\n    <p>{`Production mode simulates your Commerce application in production so that you can verify configured services.`}</p>\n    <p>{`Production mode is the default configuration setting for launching the Docker environment with read-only filesystem permissions.`}</p>\n    <p><strong parentName=\"p\">{`Prerequisites:`}</strong></p>\n    <p>{`Complete the `}<a parentName=\"p\" {...{\n        \"href\": \"../setup/initialize-docker.md\"\n      }}>{`installation steps`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`To launch the Docker environment in production mode`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your local environment, start the Docker configuration generator. You can use the service configuration options, such as `}<inlineCode parentName=\"p\">{`--php`}</inlineCode>{`, to `}<a parentName=\"p\" {...{\n            \"href\": \"../containers/index.md#service-configuration-options\"\n          }}>{`specify a version`}</a>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`./vendor/bin/ece-docker build:compose\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`Optional`}</em>{`: If you have a custom PHP configuration file, copy the default configuration DIST file to your custom configuration file and make any necessary changes.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`cp .docker/config.php.dist .docker/config.php\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Build files to containers and run in the background.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose up -d\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install Adobe Commerce in your Docker environment.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Build Adobe Commerce in the Docker container.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`docker compose run --rm build cloud-build\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Deploy Adobe Commerce in the Docker container.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`docker compose run --rm deploy cloud-deploy\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run post-deploy hooks.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`docker compose run --rm deploy cloud-post-deploy\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Configure and connect Varnish.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose run --rm deploy magento-command config:set system/full_page_cache/caching_application 2 --lock-env\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose run --rm deploy magento-command setup:config:set --http-cache-hosts=varnish\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clear the cache.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose run --rm deploy magento-command cache:clean\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`Optional`}</em>{`: Restart services if the static content does not synchronize with all images after generation on build phase.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose restart\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Access the local storefront by opening one of the following URLs in a browser:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`http://magento2.docker`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`https://magento2.docker`}</inlineCode></p>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use the default credentials to log in to the Admin (`}<inlineCode parentName=\"p\">{`https://magento2.docker/admin`}</inlineCode>{`).`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`username = `}<inlineCode parentName=\"li\">{`Admin`}</inlineCode></li>\n          <li parentName=\"ul\">{`password = `}<inlineCode parentName=\"li\">{`123123q`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Access the default email service: `}<inlineCode parentName=\"p\">{`http://magento2.docker:8025`}</inlineCode></p>\n      </li>\n    </ol>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you see the `}<inlineCode parentName=\"p\">{`Your connection is not private`}</inlineCode>{` error message while using an HTTPS connection, click `}<strong parentName=\"p\">{`Advanced`}</strong>{`, then click the `}<strong parentName=\"p\">{`Proceed to magento2.docker (unsafe)`}</strong>{` link. If you use Google Chrome and there is no `}<strong parentName=\"p\">{`Advanced`}</strong>{` button, then type `}<inlineCode parentName=\"p\">{`thisisunsafe`}</inlineCode>{` to bypass the security warnings. For `}<inlineCode parentName=\"p\">{`CURL`}</inlineCode>{` requests, add the `}<inlineCode parentName=\"p\">{`-k`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`--insecure`}</inlineCode>{` option to ignore certificate warnings.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}