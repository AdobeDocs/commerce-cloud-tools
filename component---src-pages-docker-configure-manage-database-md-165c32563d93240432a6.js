"use strict";(self.webpackChunkcommerce_cloud_tools=self.webpackChunkcommerce_cloud_tools||[]).push([[6383],{28244:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return i},default:function(){return u}});var t=n(87462),o=n(45987),m=(n(35776),n(3905)),r=n(91515);const d=["components"],i={},p=(s="InlineAlert",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.mdx)("div",e)});var s;const l={_frontmatter:i},c=r.Z;function u(e){let{components:a}=e,n=(0,o.Z)(e,d);return(0,m.mdx)(c,(0,t.Z)({},l,n,{components:a,mdxType:"MDXLayout"}),(0,m.mdx)("h1",{id:"manage-the-database"},"Manage the database"),(0,m.mdx)("p",null,"The Cloud Docker development environment provides MySQL services through a MariaDB (default) or MySQL database deployed to the ",(0,m.mdx)("a",{parentName:"p",href:"../containers/service.md#database-container"},"Docker database container"),"."),(0,m.mdx)("p",null,"You connect to the database using ",(0,m.mdx)("inlineCode",{parentName:"p"},"docker compose")," commands. You can also import data from an existing Adobe Commerce on cloud infrastructure project into the database container using the ",(0,m.mdx)("inlineCode",{parentName:"p"},"magento-cloud db:dump")," command."),(0,m.mdx)("h2",{id:"connect-to-the-database"},"Connect to the database"),(0,m.mdx)("p",null,"You can connect to the database through the Docker container or through the database port. Before you begin, locate the database credentials in the ",(0,m.mdx)("inlineCode",{parentName:"p"},"database")," section of the ",(0,m.mdx)("inlineCode",{parentName:"p"},".docker/config.php")," file."),(0,m.mdx)("p",null,"The procedures in this topic use the following default credentials:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"return [\n    'MAGENTO_CLOUD_RELATIONSHIPS' => base64_encode(json_encode([\n        'database' => [\n            [\n                'host' => 'db',\n                'path' => 'magento2',\n                'password' => 'magento2',\n                'username' => 'magento2',\n                'port' => '3306'\n            ],\n        ],\n        // The following configuration is available if you are using the split database architecture.\n        'database-quote' => [\n            [\n                'host' => 'db-quote',\n                'path' => 'magento2',\n                'password' => 'magento2',\n                'username' => 'magento2',\n                'port' => '3306'\n            ],\n        ],\n        'database-sales' => [\n            [\n                'host' => 'db-sales',\n                'path' => 'magento2',\n                'password' => 'magento2',\n                'username' => 'magento2',\n                'port' => '3306'\n            ],\n        ],\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"To connect to the database using Docker commands"),":"),(0,m.mdx)("ol",null,(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Connect to the CLI container."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"docker compose run --rm deploy bash\n"))),(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Connect to the database with a username and password."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"mysql --host=db --user=magento2 --password=magento2\n")),(0,m.mdx)("p",{parentName:"li"},"If you use the split database architecture:"),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"mysql --host=db-quote --user=magento2 --password=magento2\n")),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"mysql --host=db-sales --user=magento2 --password=magento2\n"))),(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Verify the version of the database service."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-mysql"},"SELECT VERSION();\n+--------------------------+\n| VERSION()                |\n+--------------------------+\n| 10.0.38-MariaDB-1~xenial |\n+--------------------------+\n")))),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"To connect to the database port"),":"),(0,m.mdx)("ol",null,(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Find the port used by the database. The port can change each time you restart Docker."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"docker compose ps\n")),(0,m.mdx)("p",{parentName:"li"},"Sample response:"),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-terminal"},"          Name                         Command               State               Ports\n--------------------------------------------------------------------------------------------------\nmagento-cloud_db_1          docker-entrypoint.sh mysqld      Up       0.0.0.0:32769->3306/tcp\n\n# The following lines are available if you are using the split database architecture.\n\nmagento-cloud_db-quote_1    docker-entrypoint.sh mysqld      Up       0.0.0.0:32873->3306/tcp\nmagento-cloud_db-sales_1    docker-entrypoint.sh mysqld      Up       0.0.0.0:32874->3306/tcp\n\n"))),(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Connect to the database with port information from the previous step."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"mysql -h127.0.0.1 -P32769 -umagento2 -pmagento2\n")),(0,m.mdx)("p",{parentName:"li"},"If you use the split database architecture, use the following ports to connect:"),(0,m.mdx)("p",{parentName:"li"},"For 'db-quote' service:"),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"   mysql -h127.0.0.1 -32873 -umagento2 -pmagento2\n")),(0,m.mdx)("p",{parentName:"li"},"For 'db-sales' service:"),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"   mysql -h127.0.0.1 -32874 -umagento2 -pmagento2\n"))),(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Verify the version of the database service."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-mysql"},"SELECT VERSION();\n+--------------------------+\n| VERSION()                |\n+--------------------------+\n| 10.0.38-MariaDB-1~xenial |\n+--------------------------+\n")))),(0,m.mdx)("h2",{id:"import-a-database-dump"},"Import a database dump"),(0,m.mdx)(p,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,"Before you import a database from an existing Adobe Commerce installation into a new cloud project, you must add the encryption key from the remote environment to the new environment, and then deploy the changes. See ",(0,m.mdx)("a",{parentName:"p",href:"https://devdocs.magento.com/cloud/setup/first-time-setup-import-import.html#encryption-key"},"Add the encryption key"),"."),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"To import a database dump into the Docker environment"),":"),(0,m.mdx)("ol",null,(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Create a local copy of the remote database."),(0,m.mdx)("pre",{parentName:"li"},(0,m.mdx)("code",{parentName:"pre",className:"language-bash"},"magento-cloud db:dump\n")),(0,m.mdx)("p",{parentName:"li"},"The ",(0,m.mdx)("inlineCode",{parentName:"p"},"magento-cloud db:dump")," command runs the ",(0,m.mdx)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html"},"mysqldump")," command with the ",(0,m.mdx)("inlineCode",{parentName:"p"},"--single-transaction")," flag, which allows you to back up your database without locking the tables.")),(0,m.mdx)("li",{parentName:"ol"},(0,m.mdx)("p",{parentName:"li"},"Place the resulting SQL file into the ",(0,m.mdx)("inlineCode",{parentName:"p"},".docker/mysql/docker-entrypoint-initdb.d")," folder."),(0,m.mdx)("p",{parentName:"li"},"The ",(0,m.mdx)("inlineCode",{parentName:"p"},"ece-tools")," package imports and processes the SQL file the next time you build and start the Docker environment using the ",(0,m.mdx)("inlineCode",{parentName:"p"},"docker compose up")," command. When you build, you must add the ",(0,m.mdx)("inlineCode",{parentName:"p"},"--with-entrypoint")," option to the ",(0,m.mdx)("inlineCode",{parentName:"p"},"ece-docker build:compose")," command. This option configures the directories for the imported database. See ",(0,m.mdx)("a",{parentName:"p",href:"../containers/index.md#service-configuration-options"},"Service configuration options"),"."))),(0,m.mdx)(p,{variant:"help",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,"Although it is a more complex approach, you can use GZIP to import the database by ",(0,m.mdx)("em",{parentName:"p"},"sharing")," the ",(0,m.mdx)("inlineCode",{parentName:"p"},".sql.gz")," file using the ",(0,m.mdx)("inlineCode",{parentName:"p"},".docker/mnt")," directory and import it inside the Docker container."),(0,m.mdx)("h2",{id:"customize-the-database-container"},"Customize the database container"),(0,m.mdx)("p",null,"You can inject a MySQL configuration into the database container at creation by adding the configuration to the ",(0,m.mdx)("inlineCode",{parentName:"p"},"docker-compose-override.yml")," file. Add the custom values using an included ",(0,m.mdx)("inlineCode",{parentName:"p"},"my.cnf")," file, or add the correct variables directly to the override file as shown in the following examples."),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Add a custom ",(0,m.mdx)("inlineCode",{parentName:"strong"},"my.cnf")," file to the ",(0,m.mdx)("inlineCode",{parentName:"strong"},"docker-compose.override.yml")," file"),":"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-yaml"},"db:\n  volumes:\n    - path/to/custom.my.cnf:/etc/mysql/conf.d/custom.my.cnf\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Add configuration values to the ",(0,m.mdx)("inlineCode",{parentName:"strong"},"docker-compose.override.yml")," file"),":"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-yaml"},"  db:\n    environment:\n      - innodb-buffer-pool-size=134217728\n")),(0,m.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,"See ",(0,m.mdx)("a",{parentName:"p",href:"../containers/index.md#service-containers"},"Docker service containers")," for details about the Database container and container configuration."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docker-configure-manage-database-md-165c32563d93240432a6.js.map