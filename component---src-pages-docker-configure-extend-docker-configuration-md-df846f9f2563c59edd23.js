"use strict";(self.webpackChunkcommerce_cloud_tools=self.webpackChunkcommerce_cloud_tools||[]).push([[3597],{98392:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return x}});var t=a(87462),i=a(45987),o=(a(35776),a(3905)),r=a(91515);const m=["components"],d={},l=(p="InlineAlert",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var p;const s={_frontmatter:d},c=r.Z;function x(e){let{components:n}=e,a=(0,i.Z)(e,m);return(0,o.mdx)(c,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"extend-the-docker-configuration"},"Extend the Docker configuration"),(0,o.mdx)("p",null,"You can use the built-in Docker extension mechanism to specify ",(0,o.mdx)("a",{parentName:"p",href:"https://docs.docker.com/compose/reference/overview/#specifying-multiple-compose-files"},"multiple compose files"),"."),(0,o.mdx)("p",null,"The following example replaces the default value of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ENABLE_SENDMAIL")," environment variable."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Create a ",(0,o.mdx)("inlineCode",{parentName:"p"},"docker-compose-dev.yml")," file inside your project root directory and add the following content:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-yaml"},"version: '2'\nservices:\n  deploy:\n    environment:\n      - ENABLE_SENDMAIL=false\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Pass both configuration files while executing your commands. For example:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"docker compose -f docker-compose.yml -f docker-compose-dev.yml run deploy bash\n")))),(0,o.mdx)("h2",{id:"composer-configuration"},"Composer configuration"),(0,o.mdx)("p",null,"You can configure Composer using environment variables. Each version of the PHP Docker image requires a specific Composer version and, by default, the Composer cache is not cleared when starting the Docker container. Specify the Composer version with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"COMPOSER_VERSION")," environment variable. Enable Composer clear cache with the  ",(0,o.mdx)("inlineCode",{parentName:"p"},"COMPOSER_CLEAR_CACHE")," environment variable."),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"To set the Composer version and clear Composer cache"),":"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Create a ",(0,o.mdx)("inlineCode",{parentName:"p"},"docker-compose-dev.yml")," file inside your project root directory and add the following content:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-yaml"},"version: '2'\nservices:\n  generic:\n    environment:\n      - COMPOSER_VERSION=2.2.4\n      - COMPOSER_CLEAR_CACHE=true\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Pass both configuration files while executing your commands. For example:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"docker compose -f docker-compose.yml -f docker-compose-dev.yml run deploy bash\n")))),(0,o.mdx)("h2",{id:"specify-docker-build-sources"},"Specify Docker build sources"),(0,o.mdx)("p",null,"To test changes to images or make more extensive changes to the containers, you must build them from source. You can do this by adding the ",(0,o.mdx)("inlineCode",{parentName:"p"},"build:context")," configuration to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"docker-compose.override.yml")," file."),(0,o.mdx)("p",null,"The following example defines the build context for the Web container. You can use the same technique to build from any of the images in  the ",(0,o.mdx)("inlineCode",{parentName:"p"},"vendor/magento/magento-cloud-docker")," directory or any other Docker image, including local images that are resourced outside the project."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-yaml"},"version: '2.1'\nservices:\n  web:\n    build:\n      context: ./vendor/magento/magento-cloud-docker/images/nginx/1.9/\n")),(0,o.mdx)("p",null,"Use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"--force-recreate")," option to refresh the container build to update the container configuration and test iteratively:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d --force-recreate --build\n")),(0,o.mdx)("h2",{id:"add-a-version-of-existing-service"},"Add a version of existing service"),(0,o.mdx)("p",null,"In the ",(0,o.mdx)("inlineCode",{parentName:"p"},"magento/magento-cloud-docker")," package, the available ",(0,o.mdx)("a",{parentName:"p",href:"../containers/index.md#service-configuration-options"},"service versions")," are determined by the Docker service images configured in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"images")," directory. You add a service version by creating a directory for the version and adding a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile")," and other files to configure the new version."),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"To add a service version using a")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile"),":"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Clone the ",(0,o.mdx)("inlineCode",{parentName:"p"},"magento/magento-cloud-docker")," project to your local environment if necessary.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"On the command line, change to the directory that contains the existing service version configurations."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"cd magento-cloud-docker/images/<service-name>\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Create a directory for the new version.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Change to the new directory.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Create a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile")," with any additional configuration details for the new version, such as supported plugins. You can use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile")," from the previous version as a template.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Add the ",(0,o.mdx)("inlineCode",{parentName:"p"},"docker-entrypoint.sh")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"healthcheck")," files if needed.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Add any necessary ",(0,o.mdx)("inlineCode",{parentName:"p"},".conf")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," files for the service to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"etc")," directory.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Build the image."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"docker build -t test/<service-name>:<service-version>\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"After the build succeeds, test the changes by specifying the ",(0,o.mdx)("a",{parentName:"p",href:"#specify-docker-build-sources"},"Docker build sources"),"."))),(0,o.mdx)("h2",{id:"add-a-php-extension"},"Add a PHP extension"),(0,o.mdx)("p",null,"You can add PHP extensions to the PHP container by adding the extension configuration to the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento-cloud-docker/tree/develop/src/Compose/Php"},"ExtensionResolver.php")," configuration file for Cloud Docker for Commerce."),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"To add a PHP extension"),":"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Clone the ",(0,o.mdx)("inlineCode",{parentName:"p"},"magento/magento-cloud-docker")," project to your local environment.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"On the command line, navigate to the PHP directory."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"cd magento-cloud-docker/src/Compose/Php\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Add one or more extensions to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ExtensionResolver.php")," file:"),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Open the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ExtensionResolver.php")," file for editing.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Specify the required extension in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"getConfig")," method by specifying the extension type and dependency."),(0,o.mdx)("p",{parentName:"li"},"For example, the following block adds the ",(0,o.mdx)("inlineCode",{parentName:"p"},"bcmath")," extension:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"public static function getConfig(): array\n...\n\n'bcmath' => [\n    '>=7.0' => [self::EXTENSION_TYPE => self::EXTENSION_TYPE_CORE],\n ],\n ...\n")),(0,o.mdx)("p",{parentName:"li"},"In this case, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"bcmath")," PHP core extension installs from ",(0,o.mdx)("inlineCode",{parentName:"p"},"docker-php-source")," images."))),(0,o.mdx)("p",{parentName:"li"},"The configuration you specify depends on the location of the extension source files and method of installation. You can add PHP core extensions from the official Docker PHP images, from the PECL repository, or using an installation script. For details on the configuration attributes and format for the ",(0,o.mdx)("inlineCode",{parentName:"p"},"getConfig")," method, see ",(0,o.mdx)("a",{parentName:"p",href:"#php-extension-configuration-reference"},"PHP extension configuration reference"),".")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Enable the extension by default, or by adding it to the ",(0,o.mdx)("inlineCode",{parentName:"p"},".magento.app.yaml")," file:"),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"To enable an extension by default, add it to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"DEFAULT_PHP_EXTENSIONS")," array in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ExtensionResolver.php")," file."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"\n/**\n * Extensions which should be installed by default\n */\npublic const DEFAULT_PHP_EXTENSIONS = [\n    'bcmath',\n    'bz2',\n    'calendar',\n    'exif',\n    'gd',\n    'gettext',\n    'intl',\n    'mysqli',\n    'pcntl',\n    'pdo_mysql',\n    'soap',\n    'sockets',\n    'sysvmsg',\n    'sysvsem',\n    'sysvshm',\n    'opcache',\n    'zip',\n];\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"If you add the extension to the ",(0,o.mdx)("inlineCode",{parentName:"p"},".magento.app.yaml")," for your Cloud project, you must regenerate the Docker Compose configuration file and restart the Docker container.")))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Add any required ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," files to the PHP FPM container configuration."),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"On the command line, navigate to the FPM image directory ",(0,o.mdx)("inlineCode",{parentName:"p"},"magento-cloud-docker/images/php/fpm"),":"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"cd ../../../images/php/fpm\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Add each required ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," file to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"etc")," directory.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"For each ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," file that you add, you must add the following line to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile")," (",(0,o.mdx)("inlineCode",{parentName:"p"},"magento-cloud-docker/images/php/fpm/Dockerfile"),"):"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-conf"},"COPY etc/<filename>.ini /usr/local/etc/php/conf.d/<filename>.ini\n"))))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Add any required ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," files to the PHP CLI container configuration."),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"On the command line, navigate to the CLI image directory ",(0,o.mdx)("inlineCode",{parentName:"p"},"magento-cloud-docker/images/php/cli"),"."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"cd ../cli\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Add each required ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," file to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"etc")," directory.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"For each ",(0,o.mdx)("inlineCode",{parentName:"p"},".ini")," file that you add, you must add the following line to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile")," (",(0,o.mdx)("inlineCode",{parentName:"p"},"magento-cloud-docker/images/php/cli/Dockerfile"),"):"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-conf"},"ADD etc/<file-name>.ini /usr/local/etc/php/conf.d/<filename>.ini\n"))))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Generate an updated ",(0,o.mdx)("inlineCode",{parentName:"p"},"Dockerfile")," for all PHP image versions included in the Cloud Docker for Commerce package."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/ece-docker image:generate:php\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Test the extension by specifying the ",(0,o.mdx)("a",{parentName:"p",href:"#specify-docker-build-sources"},"Docker build sources"),"."))),(0,o.mdx)("h3",{id:"php-extension-configuration-reference"},"PHP extension configuration reference"),(0,o.mdx)("p",null,"Use the following attributes to specify the PHP extension configuration in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"getConfig")," method in the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento-cloud-docker/tree/develop/src/Compose/Php"},"ExtensionResolver.php")," file. The configuration you specify depends on method of installation: from the official Docker PHP images, from the PECL repository, or using an installation script."),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Configuration option"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"PHP version constraint"),(0,o.mdx)("td",{parentName:"tr",align:null},"Specifies the extension versions to install. If different versions have different installation requirements, you must add the configuration for each version.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_CORE")),(0,o.mdx)("td",{parentName:"tr",align:null},"Extension that can be installed from a ",(0,o.mdx)("inlineCode",{parentName:"td"},"docker-php-source")," image.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_PECL")),(0,o.mdx)("td",{parentName:"tr",align:null},"Extensions that can be installed from the ",(0,o.mdx)("a",{parentName:"td",href:"https://pecl.php.net/"},"PECL")," repository.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_INSTALLATION_SCRIPT")),(0,o.mdx)("td",{parentName:"tr",align:null},"For extensions that install using a command sequence.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE")),(0,o.mdx)("td",{parentName:"tr",align:null},"Specifies whether the extension installed from the Docker PHP images, the PECL repository, or using an installation script. Valid values: ",(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_CORE"),", ",(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_PECL"),", or ",(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_INSTALLATION_SCRIPT"),(0,o.mdx)("br",null),(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_OS_DEPENDENCIES"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_CONFIGURE_OPTIONS")),(0,o.mdx)("td",{parentName:"tr",align:null},"For PHP core extensions, specifies any configuration options to apply when Docker configures the PHP extension using the ",(0,o.mdx)("inlineCode",{parentName:"td"},"docker-php-ext-configure")," command.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_PACKAGE_NAME")),(0,o.mdx)("td",{parentName:"tr",align:null},"Specifies the extension package name. This value is used to generate the installation command.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_INSTALLATION_SCRIPT")),(0,o.mdx)("td",{parentName:"tr",align:null},"For extension type ",(0,o.mdx)("inlineCode",{parentName:"td"},"EXTENSION_TYPE_INSTALLATION_SCRIPT"),", specifies the Bash script to install the extension.")))),(0,o.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"For information about extension types and extension installation, see the ",(0,o.mdx)("strong",{parentName:"p"},"How to install more PHP extensions")," section of the ",(0,o.mdx)("a",{parentName:"p",href:"https://hub.docker.com/_/php"},"PHP, Docker Official Images")," page in ",(0,o.mdx)("em",{parentName:"p"},"Docker Hub"),"."),(0,o.mdx)("h3",{id:"example-core-extension-configuration"},"Example: Core extension configuration"),(0,o.mdx)("p",null,"The following example shows the configuration for adding the PHP core extension ",(0,o.mdx)("inlineCode",{parentName:"p"},"gd")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ExtensionResolver.php")," file."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"public static function getConfig(): array\n...\n            'gd' => [\n                '>=7.0 <=7.3' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_CORE,\n                    self::EXTENSION_OS_DEPENDENCIES => ['libjpeg62-turbo-dev', 'libpng-dev', 'libfreetype6-dev'],\n                    self::EXTENSION_CONFIGURE_OPTIONS => [\n                        '--with-freetype-dir=/usr/include/',\n                        '--with-jpeg-dir=/usr/include/'\n                    ],\n                ],\n                '>=7.4' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_CORE,\n                    self::EXTENSION_OS_DEPENDENCIES => ['libjpeg62-turbo-dev', 'libpng-dev', 'libfreetype6-dev'],\n                    self::EXTENSION_CONFIGURE_OPTIONS => [\n                        '--with-freetype=/usr/include/',\n                        '--with-jpeg=/usr/include/'\n                    ],\n                ],\n\n            ],\n...\n")),(0,o.mdx)("h4",{id:"example-pecl-extension-configuration"},"Example: PECL extension configuration"),(0,o.mdx)("p",null,"The following example shows the configuration for adding the ",(0,o.mdx)("inlineCode",{parentName:"p"},"gnupg")," extension from the ",(0,o.mdx)("a",{parentName:"p",href:"https://pecl.php.net/"},"PECL")," repository."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"public static function getConfig(): array\n...\n            'gnupg' => [\n                '>=7.0' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_PECL,\n                    self::EXTENSION_OS_DEPENDENCIES => ['libgpgme11-dev'],\n                ],\n            ],\n...\n")),(0,o.mdx)("h3",{id:"example-configuration-for-extension-installed-using-a-script"},"Example: Configuration for extension installed using a script"),(0,o.mdx)("p",null,"The following example shows the configuration for installing the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ioncube")," extension using an installation script."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"public static function getConfig(): array\n...\n\n            'ioncube' => [\n                '>=7.0 <=7.3' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_INSTALLATION_SCRIPT,\n                    self::EXTENSION_INSTALLATION_SCRIPT => <<< BASH\ncd /tmp\ncurl -O https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz\ntar zxvf ioncube_loaders_lin_x86-64.tar.gz\nexport PHP_VERSION=$(php -r \"echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;\")\nexport PHP_EXT_DIR=$(php-config --extension-dir)\ncp \"./ioncube/ioncube_loader_lin_\\${PHP_VERSION}.so\" \"\\${PHP_EXT_DIR}/ioncube.so\"\nrm -rf ./ioncube\nrm ioncube_loaders_lin_x86-64.tar.gz\nBASH\n                ],\n            ],\n...\n")))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docker-configure-extend-docker-configuration-md-df846f9f2563c59edd23.js.map