{"version":3,"file":"component---src-pages-docker-configure-manage-database-md-165c32563d93240432a6.js","mappings":"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","sources":["webpack://commerce-cloud-tools/./src/pages/docker/configure/manage-database.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-cloud-tools/commerce-cloud-tools/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"manage-the-database\"\n    }}>{`Manage the database`}</h1>\n    <p>{`The Cloud Docker development environment provides MySQL services through a MariaDB (default) or MySQL database deployed to the `}<a parentName=\"p\" {...{\n        \"href\": \"../containers/service.md#database-container\"\n      }}>{`Docker database container`}</a>{`.`}</p>\n    <p>{`You connect to the database using `}<inlineCode parentName=\"p\">{`docker compose`}</inlineCode>{` commands. You can also import data from an existing Adobe Commerce on cloud infrastructure project into the database container using the `}<inlineCode parentName=\"p\">{`magento-cloud db:dump`}</inlineCode>{` command.`}</p>\n    <h2 {...{\n      \"id\": \"connect-to-the-database\"\n    }}>{`Connect to the database`}</h2>\n    <p>{`You can connect to the database through the Docker container or through the database port. Before you begin, locate the database credentials in the `}<inlineCode parentName=\"p\">{`database`}</inlineCode>{` section of the `}<inlineCode parentName=\"p\">{`.docker/config.php`}</inlineCode>{` file.`}</p>\n    <p>{`The procedures in this topic use the following default credentials:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`return [\n    'MAGENTO_CLOUD_RELATIONSHIPS' => base64_encode(json_encode([\n        'database' => [\n            [\n                'host' => 'db',\n                'path' => 'magento2',\n                'password' => 'magento2',\n                'username' => 'magento2',\n                'port' => '3306'\n            ],\n        ],\n        // The following configuration is available if you are using the split database architecture.\n        'database-quote' => [\n            [\n                'host' => 'db-quote',\n                'path' => 'magento2',\n                'password' => 'magento2',\n                'username' => 'magento2',\n                'port' => '3306'\n            ],\n        ],\n        'database-sales' => [\n            [\n                'host' => 'db-sales',\n                'path' => 'magento2',\n                'password' => 'magento2',\n                'username' => 'magento2',\n                'port' => '3306'\n            ],\n        ],\n`}</code></pre>\n    <p><strong parentName=\"p\">{`To connect to the database using Docker commands`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Connect to the CLI container.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose run --rm deploy bash\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Connect to the database with a username and password.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`mysql --host=db --user=magento2 --password=magento2\n`}</code></pre>\n        <p parentName=\"li\">{`If you use the split database architecture:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`mysql --host=db-quote --user=magento2 --password=magento2\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`mysql --host=db-sales --user=magento2 --password=magento2\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Verify the version of the database service.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-mysql\"\n          }}>{`SELECT VERSION();\n+--------------------------+\n| VERSION()                |\n+--------------------------+\n| 10.0.38-MariaDB-1~xenial |\n+--------------------------+\n`}</code></pre>\n      </li>\n    </ol>\n    <p><strong parentName=\"p\">{`To connect to the database port`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Find the port used by the database. The port can change each time you restart Docker.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose ps\n`}</code></pre>\n        <p parentName=\"li\">{`Sample response:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-terminal\"\n          }}>{`          Name                         Command               State               Ports\n--------------------------------------------------------------------------------------------------\nmagento-cloud_db_1          docker-entrypoint.sh mysqld      Up       0.0.0.0:32769->3306/tcp\n\n# The following lines are available if you are using the split database architecture.\n\nmagento-cloud_db-quote_1    docker-entrypoint.sh mysqld      Up       0.0.0.0:32873->3306/tcp\nmagento-cloud_db-sales_1    docker-entrypoint.sh mysqld      Up       0.0.0.0:32874->3306/tcp\n\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Connect to the database with port information from the previous step.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`mysql -h127.0.0.1 -P32769 -umagento2 -pmagento2\n`}</code></pre>\n        <p parentName=\"li\">{`If you use the split database architecture, use the following ports to connect:`}</p>\n        <p parentName=\"li\">{`For 'db-quote' service:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`   mysql -h127.0.0.1 -32873 -umagento2 -pmagento2\n`}</code></pre>\n        <p parentName=\"li\">{`For 'db-sales' service:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`   mysql -h127.0.0.1 -32874 -umagento2 -pmagento2\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Verify the version of the database service.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-mysql\"\n          }}>{`SELECT VERSION();\n+--------------------------+\n| VERSION()                |\n+--------------------------+\n| 10.0.38-MariaDB-1~xenial |\n+--------------------------+\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"import-a-database-dump\"\n    }}>{`Import a database dump`}</h2>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Before you import a database from an existing Adobe Commerce installation into a new cloud project, you must add the encryption key from the remote environment to the new environment, and then deploy the changes. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/cloud/setup/first-time-setup-import-import.html#encryption-key\"\n      }}>{`Add the encryption key`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`To import a database dump into the Docker environment`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a local copy of the remote database.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`magento-cloud db:dump\n`}</code></pre>\n        {/* <InlineAlert variant=\"info\" slots=\"text\"/> */}\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`magento-cloud db:dump`}</inlineCode>{` command runs the `}<a parentName=\"p\" {...{\n            \"href\": \"https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html\"\n          }}>{`mysqldump`}</a>{` command with the `}<inlineCode parentName=\"p\">{`--single-transaction`}</inlineCode>{` flag, which allows you to back up your database without locking the tables.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Place the resulting SQL file into the `}<inlineCode parentName=\"p\">{`.docker/mysql/docker-entrypoint-initdb.d`}</inlineCode>{` folder.`}</p>\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`ece-tools`}</inlineCode>{` package imports and processes the SQL file the next time you build and start the Docker environment using the `}<inlineCode parentName=\"p\">{`docker compose up`}</inlineCode>{` command. When you build, you must add the `}<inlineCode parentName=\"p\">{`--with-entrypoint`}</inlineCode>{` option to the `}<inlineCode parentName=\"p\">{`ece-docker build:compose`}</inlineCode>{` command. This option configures the directories for the imported database. See `}<a parentName=\"p\" {...{\n            \"href\": \"../containers/index.md#service-configuration-options\"\n          }}>{`Service configuration options`}</a>{`.`}</p>\n      </li>\n    </ol>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Although it is a more complex approach, you can use GZIP to import the database by `}<em parentName=\"p\">{`sharing`}</em>{` the `}<inlineCode parentName=\"p\">{`.sql.gz`}</inlineCode>{` file using the `}<inlineCode parentName=\"p\">{`.docker/mnt`}</inlineCode>{` directory and import it inside the Docker container.`}</p>\n    <h2 {...{\n      \"id\": \"customize-the-database-container\"\n    }}>{`Customize the database container`}</h2>\n    <p>{`You can inject a MySQL configuration into the database container at creation by adding the configuration to the `}<inlineCode parentName=\"p\">{`docker-compose-override.yml`}</inlineCode>{` file. Add the custom values using an included `}<inlineCode parentName=\"p\">{`my.cnf`}</inlineCode>{` file, or add the correct variables directly to the override file as shown in the following examples.`}</p>\n    <p><strong parentName=\"p\">{`Add a custom `}<inlineCode parentName=\"strong\">{`my.cnf`}</inlineCode>{` file to the `}<inlineCode parentName=\"strong\">{`docker-compose.override.yml`}</inlineCode>{` file`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`db:\n  volumes:\n    - path/to/custom.my.cnf:/etc/mysql/conf.d/custom.my.cnf\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Add configuration values to the `}<inlineCode parentName=\"strong\">{`docker-compose.override.yml`}</inlineCode>{` file`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`  db:\n    environment:\n      - innodb-buffer-pool-size=134217728\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"../containers/index.md#service-containers\"\n      }}>{`Docker service containers`}</a>{` for details about the Database container and container configuration.`}</p>\n    {/*Link definitions*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}