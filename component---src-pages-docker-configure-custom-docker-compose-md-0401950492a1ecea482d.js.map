{"version":3,"file":"component---src-pages-docker-configure-custom-docker-compose-md-0401950492a1ecea482d.js","mappings":"mSAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,+CACH,gDACL,kBAAK,kDACL,kBAAK,mGAAiG,uBAAYC,WAAW,KAAM,uBAAoC,2BAAyB,uBAAYA,WAAW,KAAM,mCAAgD,8KAA4K,cAAGA,WAAW,IACnc,KAAQ,mCACL,aAAiB,MACxB,kBAAK,4GAA0G,uBAAYA,WAAW,KAAM,mCAAgD,yBAAuB,cAAGA,WAAW,IAC7N,KAAQ,yEACL,aAAiB,MACxB,eACE,GAAM,YACH,aACL,eACE,GAAM,kCACH,WAAS,uBAAYA,WAAW,MAAO,uBAAoC,UAChF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,maAEP,kBAAK,yCAAuC,uBAAYA,WAAW,KAAM,uBAAoC,WAC7G,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,+0HA+IP,eACE,GAAM,wEACH,WAAS,uBAAYA,WAAW,MAAO,uBAAoC,gDAChF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,+8BAEP,kBAAK,2EACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,4YAwBX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-cloud-tools/./src/pages/docker/configure/custom-docker-compose.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-cloud-tools/commerce-cloud-tools/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"build-a-custom-docker-compose-configuration\"\n    }}>{`Build a custom Docker Compose configuration`}</h1>\n    <p>{`Build a custom configuration using ECE-tools.`}</p>\n    <p>{`Instead of using the Adobe Commerce on cloud infrastructure project configuration to build the `}<inlineCode parentName=\"p\">{`docker-compose.yaml`}</inlineCode>{` file, you can use the `}<inlineCode parentName=\"p\">{`ece-docker build:custom:compose`}</inlineCode>{` command. Using this command with a JSON configuration is the quickest way to change your environment settings. You provide the configuration as a JSON array as shown in `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-docker-composeyaml-file\"\n      }}>{`Example 1`}</a>{`.`}</p>\n    <p>{`For Cloud Docker for Commerce 1.2 and later, you can specify custom images and image versions using the `}<inlineCode parentName=\"p\">{`ece-docker build:custom:compose`}</inlineCode>{` command as shown in `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-docker-composeyaml-file-with-custom-images-and-image-versions\"\n      }}>{`Example 2`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"custom-docker-composeyaml-file\"\n    }}>{`Custom `}<inlineCode parentName=\"h3\">{`docker-compose.yaml`}</inlineCode>{` file`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`./vendor/bin/ece-docker build:custom:compose '{\"name\":\"magento\",\"system\":{\"mode\":\"production\",\"host\":\"magento2.test\",\"port\":\"8080\",\"db\":{\"increment_increment\":3,\"increment_offset\":2},\"mailhog\":{\"smtp_port\":\"1026\",\"http_port\":\"8026\"}},\"services\":{\"php\":{\"version\":\"7.3\",\"enabled\":true,\"extensions\":{\"enabled\":[\"xsl\"]}},\"mysql\":{\"version\":\"10.2\",\"image\":\"mariadb\",\"enabled\":true}, \"mailhog\": {\"enabled\":true}}}'\n`}</code></pre>\n    <p>{`This command generates the following `}<inlineCode parentName=\"p\">{`docker-compose.yaml`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`version: '2.1'\nservices:\n  db:\n    hostname: db.magento2.test\n    image: 'mariadb:10.2'\n    environment:\n      - MYSQL_ROOT_PASSWORD=magento2\n      - MYSQL_DATABASE=magento2\n      - MYSQL_USER=magento2\n      - MYSQL_PASSWORD=magento2\n    ports:\n      - '3306'\n    volumes:\n      - '.docker/mnt:/mnt:rw,delegated'\n      - 'magento-magento-db:/var/lib/mysql'\n    healthcheck:\n      test: 'mysqladmin ping -h localhost -pmagento2'\n      interval: 30s\n      timeout: 30s\n      retries: 3\n    command: '--auto_increment_increment=3 --auto_increment_offset=2'\n    networks:\n      magento:\n        aliases:\n          - db.magento2.test\n  fpm:\n    hostname: fpm.magento2.test\n    image: 'magento/magento-cloud-docker-php:7.3-fpm-1.2.0'\n    extends: generic\n    volumes:\n      - '.:/app:ro,delegated'\n      - 'magento-vendor:/app/vendor:ro,delegated'\n      - 'magento-generated:/app/generated:ro,delegated'\n      - '.docker/mnt:/mnt:rw,delegated'\n    networks:\n      magento:\n        aliases:\n          - fpm.magento2.test\n    depends_on:\n      db:\n        condition: service_healthy\n  web:\n    hostname: web.magento2.test\n    image: 'magento/magento-cloud-docker-nginx:1.19-1.2.0'\n    extends: generic\n    volumes:\n      - '.:/app:ro,delegated'\n      - 'magento-vendor:/app/vendor:ro,delegated'\n      - 'magento-generated:/app/generated:ro,delegated'\n      - '.docker/mnt:/mnt:rw,delegated'\n    environment:\n      - WITH_XDEBUG=0\n    networks:\n      magento:\n        aliases:\n          - web.magento2.test\n    depends_on:\n      fpm:\n        condition: service_started\n  varnish:\n    hostname: varnish.magento2.test\n    image: 'magento/magento-cloud-docker-varnish:6.2-1.2.0'\n    networks:\n      magento:\n        aliases:\n          - varnish.magento2.test\n    depends_on:\n      web:\n        condition: service_started\n  tls:\n    hostname: tls.magento2.test\n    image: 'magento/magento-cloud-docker-nginx:1.19-1.2.0'\n    extends: generic\n    networks:\n      magento:\n        aliases:\n          - magento2.test\n    environment:\n      UPSTREAM_HOST: varnish\n    ports:\n      - '8080:80'\n      - '443:443'\n    depends_on:\n      varnish:\n        condition: service_started\n  generic:\n    hostname: generic.magento2.test\n    image: 'magento/magento-cloud-docker-php:7.3-cli-1.2.0'\n    env_file: ./.docker/config.env\n    environment:\n      - 'PHP_EXTENSIONS=bcmath bz2 calendar exif gd gettext intl mysqli pcntl pdo_mysql soap sockets sysvmsg sysvsem sysvshm opcache zip xsl'\n  build:\n    hostname: build.magento2.test\n    image: 'magento/magento-cloud-docker-php:7.3-cli-1.2.0'\n    extends: generic\n    volumes:\n      - '.:/app:rw,delegated'\n      - 'magento-vendor:/app/vendor:rw,delegated'\n      - 'magento-generated:/app/generated:rw,delegated'\n      - '~/.composer/cache:/root/.composer/cache:rw,delegated'\n    networks:\n      magento-build:\n        aliases:\n          - build.magento2.test\n    depends_on:\n      db:\n        condition: service_healthy\n  deploy:\n    hostname: deploy.magento2.test\n    image: 'magento/magento-cloud-docker-php:7.3-cli-1.2.0'\n    extends: generic\n    volumes:\n      - '.:/app:ro,delegated'\n      - 'magento-vendor:/app/vendor:ro,delegated'\n      - 'magento-generated:/app/generated:ro,delegated'\n      - '.docker/mnt:/mnt:rw,delegated'\n    networks:\n      magento:\n        aliases:\n          - deploy.magento2.test\n    depends_on:\n      db:\n        condition: service_healthy\n  mailhog:\n    hostname: mailhog.magento2.test\n    image: 'mailhog/mailhog:latest'\n    ports:\n      - '1026:1025'\n      - '8026:8025'\n    networks:\n      magento:\n        aliases:\n          - mailhog.magento2.test\nvolumes:\n  magento-vendor: {  }\n  magento-generated: {  }\n  magento-magento-db: {  }\nnetworks:\n  magento:\n    driver: bridge\n  magento-build:\n    driver: bridge\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-docker-composeyaml-file-with-custom-images-and-image-versions\"\n    }}>{`Custom `}<inlineCode parentName=\"h3\">{`docker-compose.yaml`}</inlineCode>{` file with custom images and image versions`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`./vendor/bin/ece-docker build:custom:compose '{\"name\":\"magento\",\"system\":{\"mode\":\"production\",\"host\":\"magento2.test\",\"port\":\"8080\",\"db\":{\"increment_increment\":3,\"increment_offset\":2},\"mailhog\":{\"smtp_port\":\"1026\",\"http_port\":\"8026\"}},\"services\":{\"php\":{\"image\":\"php-v1\",\"version\":\"7.4\",\"enabled\":true},\"php-cli\":{\"image-pattern\":\"%s:%s-cli\"},\"php-fpm\":{\"image-pattern\":\"%s:%s-fpm\"},\"mysql\":{\"image\":\"mariadb-v1\",\"version\":\"10.3\",\"image-pattern\":\"%s:%s\",\"enabled\":true},\"redis\":{\"image\":\"redis-v1\",\"enabled\":\"true\",\"version\":\"5\"},\"elasticsearch\":{\"image\":\"elasticsearch-v1\",\"image-pattern\":\"%s:%s\",\"enabled\":true,\"version\":\"7.6\"},\"varnish\":{\"image\":\"varnish-v1\",\"image-pattern\":\"%s:%s\",\"enabled\":true,\"version\":\"6.2\"},\"nginx\":{\"image\":\"nginx-v1\",\"version\":\"1.19\",\"image-pattern\":\"%s:%s\",\"enabled\":\"true\"},\"test\":{\"enabled\":true}},\"mounts\":{\"var\":{\"path\":\"var\"},\"app-etc\":{\"path\":\"app\\\\/etc\"},\"pub-media\":{\"path\":\"pub\\\\/media\"},\"pub-static\":{\"path\":\"pub\\\\/static\"}}}'\n`}</code></pre>\n    <p>{`This command generates the following images in the Docker environment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`services:\n  db:\n    image: 'mariadb-v1:10.3'\n  redis:\n    image: 'redis-v1:5'\n  fpm:\n    image: 'php-v1:7.4-fpm'\n  web:\n    image: 'nginx-v1:1.19'\n  varnish:\n    image: 'varnish-v1:6.2'\n  tls:\n    image: 'nginx-v1:1.19'\n  test:\n    image: 'php-v1:7.4-cli'\n  generic:\n    image: 'php-v1:7.4-cli'\n  build:\n    image: 'php-v1:7.4-cli'\n  deploy:\n    image: 'php-v1:7.4-cli'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}