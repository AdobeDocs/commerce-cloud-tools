{"version":3,"file":"component---src-pages-docker-configure-extend-docker-configuration-md-df846f9f2563c59edd23.js","mappings":"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","sources":["webpack://commerce-cloud-tools/./src/pages/docker/configure/extend-docker-configuration.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-cloud-tools/commerce-cloud-tools/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extend-the-docker-configuration\"\n    }}>{`Extend the Docker configuration`}</h1>\n    <p>{`You can use the built-in Docker extension mechanism to specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/compose/reference/overview/#specifying-multiple-compose-files\"\n      }}>{`multiple compose files`}</a>{`.`}</p>\n    <p>{`The following example replaces the default value of the `}<inlineCode parentName=\"p\">{`ENABLE_SENDMAIL`}</inlineCode>{` environment variable.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`docker-compose-dev.yml`}</inlineCode>{` file inside your project root directory and add the following content:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`version: '2'\nservices:\n  deploy:\n    environment:\n      - ENABLE_SENDMAIL=false\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Pass both configuration files while executing your commands. For example:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose -f docker-compose.yml -f docker-compose-dev.yml run deploy bash\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"composer-configuration\"\n    }}>{`Composer configuration`}</h2>\n    <p>{`You can configure Composer using environment variables. Each version of the PHP Docker image requires a specific Composer version and, by default, the Composer cache is not cleared when starting the Docker container. Specify the Composer version with the `}<inlineCode parentName=\"p\">{`COMPOSER_VERSION`}</inlineCode>{` environment variable. Enable Composer clear cache with the  `}<inlineCode parentName=\"p\">{`COMPOSER_CLEAR_CACHE`}</inlineCode>{` environment variable.`}</p>\n    <p><strong parentName=\"p\">{`To set the Composer version and clear Composer cache`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`docker-compose-dev.yml`}</inlineCode>{` file inside your project root directory and add the following content:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`version: '2'\nservices:\n  generic:\n    environment:\n      - COMPOSER_VERSION=2.2.4\n      - COMPOSER_CLEAR_CACHE=true\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Pass both configuration files while executing your commands. For example:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker compose -f docker-compose.yml -f docker-compose-dev.yml run deploy bash\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"specify-docker-build-sources\"\n    }}>{`Specify Docker build sources`}</h2>\n    <p>{`To test changes to images or make more extensive changes to the containers, you must build them from source. You can do this by adding the `}<inlineCode parentName=\"p\">{`build:context`}</inlineCode>{` configuration to the `}<inlineCode parentName=\"p\">{`docker-compose.override.yml`}</inlineCode>{` file.`}</p>\n    <p>{`The following example defines the build context for the Web container. You can use the same technique to build from any of the images in  the `}<inlineCode parentName=\"p\">{`vendor/magento/magento-cloud-docker`}</inlineCode>{` directory or any other Docker image, including local images that are resourced outside the project.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`version: '2.1'\nservices:\n  web:\n    build:\n      context: ./vendor/magento/magento-cloud-docker/images/nginx/1.9/\n`}</code></pre>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`--force-recreate`}</inlineCode>{` option to refresh the container build to update the container configuration and test iteratively:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker compose up -d --force-recreate --build\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-a-version-of-existing-service\"\n    }}>{`Add a version of existing service`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`magento/magento-cloud-docker`}</inlineCode>{` package, the available `}<a parentName=\"p\" {...{\n        \"href\": \"../containers/index.md#service-configuration-options\"\n      }}>{`service versions`}</a>{` are determined by the Docker service images configured in the `}<inlineCode parentName=\"p\">{`images`}</inlineCode>{` directory. You add a service version by creating a directory for the version and adding a `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` and other files to configure the new version.`}</p>\n    <p><strong parentName=\"p\">{`To add a service version using a`}</strong>{` `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clone the `}<inlineCode parentName=\"p\">{`magento/magento-cloud-docker`}</inlineCode>{` project to your local environment if necessary.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`On the command line, change to the directory that contains the existing service version configurations.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`cd magento-cloud-docker/images/<service-name>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a directory for the new version.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Change to the new directory.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` with any additional configuration details for the new version, such as supported plugins. You can use the `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` from the previous version as a template.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add the `}<inlineCode parentName=\"p\">{`docker-entrypoint.sh`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`healthcheck`}</inlineCode>{` files if needed.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add any necessary `}<inlineCode parentName=\"p\">{`.conf`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` files for the service to the `}<inlineCode parentName=\"p\">{`etc`}</inlineCode>{` directory.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Build the image.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`docker build -t test/<service-name>:<service-version>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`After the build succeeds, test the changes by specifying the `}<a parentName=\"p\" {...{\n            \"href\": \"#specify-docker-build-sources\"\n          }}>{`Docker build sources`}</a>{`.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"add-a-php-extension\"\n    }}>{`Add a PHP extension`}</h2>\n    <p>{`You can add PHP extensions to the PHP container by adding the extension configuration to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento-cloud-docker/tree/develop/src/Compose/Php\"\n      }}>{`ExtensionResolver.php`}</a>{` configuration file for Cloud Docker for Commerce.`}</p>\n    <p><strong parentName=\"p\">{`To add a PHP extension`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clone the `}<inlineCode parentName=\"p\">{`magento/magento-cloud-docker`}</inlineCode>{` project to your local environment.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`On the command line, navigate to the PHP directory.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`cd magento-cloud-docker/src/Compose/Php\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add one or more extensions to the `}<inlineCode parentName=\"p\">{`ExtensionResolver.php`}</inlineCode>{` file:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Open the `}<inlineCode parentName=\"p\">{`ExtensionResolver.php`}</inlineCode>{` file for editing.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Specify the required extension in the `}<inlineCode parentName=\"p\">{`getConfig`}</inlineCode>{` method by specifying the extension type and dependency.`}</p>\n            <p parentName=\"li\">{`For example, the following block adds the `}<inlineCode parentName=\"p\">{`bcmath`}</inlineCode>{` extension:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-php?start_inline=1\"\n              }}>{`public static function getConfig(): array\n...\n\n'bcmath' => [\n    '>=7.0' => [self::EXTENSION_TYPE => self::EXTENSION_TYPE_CORE],\n ],\n ...\n`}</code></pre>\n            <p parentName=\"li\">{`In this case, the `}<inlineCode parentName=\"p\">{`bcmath`}</inlineCode>{` PHP core extension installs from `}<inlineCode parentName=\"p\">{`docker-php-source`}</inlineCode>{` images.`}</p>\n          </li>\n        </ul>\n        {/* <InlineAlert variant=\"info\" slots=\"text\"/> */}\n        <p parentName=\"li\">{`The configuration you specify depends on the location of the extension source files and method of installation. You can add PHP core extensions from the official Docker PHP images, from the PECL repository, or using an installation script. For details on the configuration attributes and format for the `}<inlineCode parentName=\"p\">{`getConfig`}</inlineCode>{` method, see `}<a parentName=\"p\" {...{\n            \"href\": \"#php-extension-configuration-reference\"\n          }}>{`PHP extension configuration reference`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Enable the extension by default, or by adding it to the `}<inlineCode parentName=\"p\">{`.magento.app.yaml`}</inlineCode>{` file:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To enable an extension by default, add it to the `}<inlineCode parentName=\"p\">{`DEFAULT_PHP_EXTENSIONS`}</inlineCode>{` array in the `}<inlineCode parentName=\"p\">{`ExtensionResolver.php`}</inlineCode>{` file.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-php?start_inline=1\"\n              }}>{`\n/**\n * Extensions which should be installed by default\n */\npublic const DEFAULT_PHP_EXTENSIONS = [\n    'bcmath',\n    'bz2',\n    'calendar',\n    'exif',\n    'gd',\n    'gettext',\n    'intl',\n    'mysqli',\n    'pcntl',\n    'pdo_mysql',\n    'soap',\n    'sockets',\n    'sysvmsg',\n    'sysvsem',\n    'sysvshm',\n    'opcache',\n    'zip',\n];\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If you add the extension to the `}<inlineCode parentName=\"p\">{`.magento.app.yaml`}</inlineCode>{` for your Cloud project, you must regenerate the Docker Compose configuration file and restart the Docker container.`}</p>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add any required `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` files to the PHP FPM container configuration.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`On the command line, navigate to the FPM image directory `}<inlineCode parentName=\"p\">{`magento-cloud-docker/images/php/fpm`}</inlineCode>{`:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`cd ../../../images/php/fpm\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Add each required `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` file to the `}<inlineCode parentName=\"p\">{`etc`}</inlineCode>{` directory.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`For each `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` file that you add, you must add the following line to the `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`magento-cloud-docker/images/php/fpm/Dockerfile`}</inlineCode>{`):`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-conf\"\n              }}>{`COPY etc/<filename>.ini /usr/local/etc/php/conf.d/<filename>.ini\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add any required `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` files to the PHP CLI container configuration.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`On the command line, navigate to the CLI image directory `}<inlineCode parentName=\"p\">{`magento-cloud-docker/images/php/cli`}</inlineCode>{`.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`cd ../cli\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Add each required `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` file to the `}<inlineCode parentName=\"p\">{`etc`}</inlineCode>{` directory.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`For each `}<inlineCode parentName=\"p\">{`.ini`}</inlineCode>{` file that you add, you must add the following line to the `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`magento-cloud-docker/images/php/cli/Dockerfile`}</inlineCode>{`):`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-conf\"\n              }}>{`ADD etc/<file-name>.ini /usr/local/etc/php/conf.d/<filename>.ini\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Generate an updated `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` for all PHP image versions included in the Cloud Docker for Commerce package.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/ece-docker image:generate:php\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Test the extension by specifying the `}<a parentName=\"p\" {...{\n            \"href\": \"#specify-docker-build-sources\"\n          }}>{`Docker build sources`}</a>{`.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"php-extension-configuration-reference\"\n    }}>{`PHP extension configuration reference`}</h3>\n    <p>{`Use the following attributes to specify the PHP extension configuration in the `}<inlineCode parentName=\"p\">{`getConfig`}</inlineCode>{` method in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento-cloud-docker/tree/develop/src/Compose/Php\"\n      }}>{`ExtensionResolver.php`}</a>{` file. The configuration you specify depends on method of installation: from the official Docker PHP images, from the PECL repository, or using an installation script.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Configuration option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PHP version constraint`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Specifies the extension versions to install. If different versions have different installation requirements, you must add the configuration for each version.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_TYPE_CORE`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Extension that can be installed from a `}<inlineCode parentName=\"td\">{`docker-php-source`}</inlineCode>{` image.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_TYPE_PECL`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Extensions that can be installed from the `}<a parentName=\"td\" {...{\n              \"href\": \"https://pecl.php.net/\"\n            }}>{`PECL`}</a>{` repository.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_TYPE_INSTALLATION_SCRIPT`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`For extensions that install using a command sequence.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_TYPE`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Specifies whether the extension installed from the Docker PHP images, the PECL repository, or using an installation script. Valid values: `}<inlineCode parentName=\"td\">{`EXTENSION_TYPE_CORE`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`EXTENSION_TYPE_PECL`}</inlineCode>{`, or `}<inlineCode parentName=\"td\">{`EXTENSION_TYPE_INSTALLATION_SCRIPT`}</inlineCode><br /><inlineCode parentName=\"td\">{`EXTENSION_OS_DEPENDENCIES`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_CONFIGURE_OPTIONS`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`For PHP core extensions, specifies any configuration options to apply when Docker configures the PHP extension using the `}<inlineCode parentName=\"td\">{`docker-php-ext-configure`}</inlineCode>{` command.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_PACKAGE_NAME`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Specifies the extension package name. This value is used to generate the installation command.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`EXTENSION_INSTALLATION_SCRIPT`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`For extension type `}<inlineCode parentName=\"td\">{`EXTENSION_TYPE_INSTALLATION_SCRIPT`}</inlineCode>{`, specifies the Bash script to install the extension.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about extension types and extension installation, see the `}<strong parentName=\"p\">{`How to install more PHP extensions`}</strong>{` section of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/_/php\"\n      }}>{`PHP, Docker Official Images`}</a>{` page in `}<em parentName=\"p\">{`Docker Hub`}</em>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-core-extension-configuration\"\n    }}>{`Example: Core extension configuration`}</h3>\n    <p>{`The following example shows the configuration for adding the PHP core extension `}<inlineCode parentName=\"p\">{`gd`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`ExtensionResolver.php`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`public static function getConfig(): array\n...\n            'gd' => [\n                '>=7.0 <=7.3' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_CORE,\n                    self::EXTENSION_OS_DEPENDENCIES => ['libjpeg62-turbo-dev', 'libpng-dev', 'libfreetype6-dev'],\n                    self::EXTENSION_CONFIGURE_OPTIONS => [\n                        '--with-freetype-dir=/usr/include/',\n                        '--with-jpeg-dir=/usr/include/'\n                    ],\n                ],\n                '>=7.4' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_CORE,\n                    self::EXTENSION_OS_DEPENDENCIES => ['libjpeg62-turbo-dev', 'libpng-dev', 'libfreetype6-dev'],\n                    self::EXTENSION_CONFIGURE_OPTIONS => [\n                        '--with-freetype=/usr/include/',\n                        '--with-jpeg=/usr/include/'\n                    ],\n                ],\n\n            ],\n...\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-pecl-extension-configuration\"\n    }}>{`Example: PECL extension configuration`}</h4>\n    <p>{`The following example shows the configuration for adding the `}<inlineCode parentName=\"p\">{`gnupg`}</inlineCode>{` extension from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pecl.php.net/\"\n      }}>{`PECL`}</a>{` repository.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`public static function getConfig(): array\n...\n            'gnupg' => [\n                '>=7.0' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_PECL,\n                    self::EXTENSION_OS_DEPENDENCIES => ['libgpgme11-dev'],\n                ],\n            ],\n...\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-configuration-for-extension-installed-using-a-script\"\n    }}>{`Example: Configuration for extension installed using a script`}</h3>\n    <p>{`The following example shows the configuration for installing the `}<inlineCode parentName=\"p\">{`ioncube`}</inlineCode>{` extension using an installation script.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`public static function getConfig(): array\n...\n\n            'ioncube' => [\n                '>=7.0 <=7.3' => [\n                    self::EXTENSION_TYPE => self::EXTENSION_TYPE_INSTALLATION_SCRIPT,\n                    self::EXTENSION_INSTALLATION_SCRIPT => <<< BASH\ncd /tmp\ncurl -O https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz\ntar zxvf ioncube_loaders_lin_x86-64.tar.gz\nexport PHP_VERSION=$(php -r \"echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;\")\nexport PHP_EXT_DIR=$(php-config --extension-dir)\ncp \"./ioncube/ioncube_loader_lin_\\\\\\$\\{PHP_VERSION}.so\" \"\\\\\\$\\{PHP_EXT_DIR}/ioncube.so\"\nrm -rf ./ioncube\nrm ioncube_loaders_lin_x86-64.tar.gz\nBASH\n                ],\n            ],\n...\n`}</code></pre>\n    {/* link definitions */}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}